#!/bin/bash
### BEGIN INIT INFO
# Provides:          myproject-mongo-parser
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs $remote_fs $network
# X-Start-Before:    nginx
# Should-Start:      $syslog
# Should-Stop:       $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Quick hack to make sure our mongo parser actually starts.
# Description:       Assumes mongo is already installed. Dependencies are not
#                    auto-configured.
### END INIT INFO

# Author: Daniel Smedegaard Buus <daniel@myproject.com>

# Get shared stuff:
. /lib/myproject/initd-shared

DESC="Quick hack to make sure our mongo parser actually starts."
CHUID="root:root"
NAME=myproject-mongo-parser
SCRIPT_NAME=/etc/init.d/$NAME
WORK_DIR=/myproject-parser
NODE_SCRIPT=/myproject-parser/index.js
NODE_ENV=production

# Read configuration variable file if it is present
[[ -r /etc/default/$NAME ]] && . /etc/default/$NAME

# Set output capture file name
OUTPUTCAP=/tmp/$NAME.output




#
# Function that starts the daemon/service
#
# Return
#   0 if daemon has been started
#   1 if daemon was already running
#   2 if daemon could not be started
#
do_start()
{
    if [[ $RUNS_MONGOPARSER != true ]]; then
        echo "Mongo parser is not enabled on this instance."
        return 0
    fi

    # Check if we're already (fully) running
    [[ "$(/usr/local/bin/forever --no-colors list | /bin/grep $NODE_SCRIPT | wc -l)" = "1" ]] &&
        echo "Already running." &&
        return 1

    echo "Launching mongo parser ..."

    NODE_ENV=$NODE_ENV start-stop-daemon --start --chuid $CHUID --exec /usr/local/bin/forever -- \
        --no-colors \
        start -p "$WORK_DIR" -a \
        -l /var/log/myproject-mongo-parser.forever.log \
        -o /var/log/myproject-mongo-parser.out.log \
        -e /var/log/myproject-mongo-parser.err.log \
        --minUptime 5000 \
        --spinSleepTime 30000 \
        "$NODE_SCRIPT"

    [[ "$?" != "0" ]] &&
        echo "Failed" &&
        return 2

    return 0
}



#
# Function that stops the daemon/service
#
# Return
#   0 if daemon has been stopped
#   1 if daemon was already stopped
#   2 if daemon could not be stopped
#   other if a failure occurred
#
do_stop()
{
    # Check that we're actually running.
    [[ "$(/usr/local/bin/forever --no-colors list | /bin/grep $NODE_SCRIPT | wc -l)" = "0" ]] &&
        echo "Not running." &&
        return 1

    /usr/local/bin/forever --no-colors stop $NODE_SCRIPT

    # So did forever actually stop our worker?
    CURRENT_WORKERS_COUNT=$(/usr/local/bin/forever --no-colors list | /bin/grep $NODE_SCRIPT | wc -l)

    [[ "$CURRENT_WORKERS_COUNT" != "0" ]] &&
        echo "Failed to stop mongo parser." &&
        return 2

    return 0
}



case "$1" in

    start)
        [[ "$VERBOSE" != no ]] && log_daemon_msg "Starting $DESC" "$NAME"

        do_start 2>&1 | tee $OUTPUTCAP

        EXIT_CODE=${PIPESTATUS[0]}

        case "$EXIT_CODE" in
            0)
                [[ "$VERBOSE" != no ]] && log_end_msg 0
                shout "Mongo parser started" "Captured output: $NL2$(cat $OUTPUTCAP)"
            ;;
            1)
                [[ "$VERBOSE" != no ]] && log_end_msg 0
            ;;
            *)
                [[ "$VERBOSE" != no ]] && log_end_msg 1
                shout "Mongo parser failed to start" "Captured output: $NL2$(cat $OUTPUTCAP)"
                exit 1
            ;;
        esac
    ;;

    stop)
        [[ "$VERBOSE" != no ]] && log_daemon_msg "Stopping $DESC" "$NAME"

        do_stop 2>&1 | tee $OUTPUTCAP

        EXIT_CODE=${PIPESTATUS[0]}

        case "$EXIT_CODE" in
            0)
                [[ "$VERBOSE" != no ]] && log_end_msg 0
                shout "Mongo parser stopped" "Captured output: $NL2$(cat $OUTPUTCAP)"
            ;;
            1)
                [[ "$VERBOSE" != no ]] && log_end_msg 0
            ;;
            *)
                [[ "$VERBOSE" != no ]] && log_end_msg 1
                shout "Mongo parser failed to stop" "Captured output: $NL2$(cat $OUTPUTCAP)"
                exit 1
            ;;
        esac
    ;;

    status)
        echo "Mongo parser status according to forever:"
        echo

        /usr/local/bin/forever --no-colors list | /bin/grep -E "(uptime)|($NODE_SCRIPT)|(No forever)"

        echo
        echo "nginx status:"

        service nginx status
    ;;

    restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"

        do_stop 2>&1 | tee $OUTPUTCAP

        EXIT_CODE=${PIPESTATUS[0]}

        case "$EXIT_CODE" in
            0|1)
                do_start 2>&1 | tee -a $OUTPUTCAP

                EXIT_CODE=${PIPESTATUS[0]}

                case "$EXIT_CODE" in
                    0)
                        [[ "$VERBOSE" != no ]] && log_end_msg 0
                        shout "Mongo parser restarted" "Captured output: $NL2$(cat $OUTPUTCAP)"
                    ;;
                    1)
                        [[ "$VERBOSE" != no ]] && log_end_msg 0
                    ;;
                    *)
                        [[ "$VERBOSE" != no ]] && log_end_msg 1
                        shout "Mongo parser failed to restart (start)" "Captured output: $NL2$(cat $OUTPUTCAP)"
                        exit 1
                    ;;
                esac
            ;;
            *)
                # Failed to stop
                [[ "$VERBOSE" != no ]] && log_end_msg 1
                shout "Mongo parser failed to restart (stop)" "Captured output: $NL2$(cat $OUTPUTCAP)"
                exit 1
            ;;
        esac
    ;;

    *)
        echo "Usage: $SCRIPT_NAME {start|restart|force-reload|stop|status}" >&2
    ;;
esac

exit 0
